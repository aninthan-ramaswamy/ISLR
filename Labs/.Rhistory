summary(faa_combined_clean)
summary(faa_combined_clean[aircraft=="airbus"])
summary(faa_combined_clean[aircraft=="boeing"])
for (col in ncol(faa_combined_clean)) {
hist(faa_combined_clean[,col])
}
for (col in ncol(faa_combined_clean)) {
hist(faa_combined_clean[,..col])
}
for (col in ncol(faa_combined_clean)) {
hist(faa_combined_clean[,.col])
}
for (col in ncol(faa_combined_clean)) {
hist(faa_combined_clean[,...col])
}
for (col in ncol(faa_combined_clean)) {
hist(faa_combined_clean[,.(col)])
}
for (col in names(faa_combined_clean)) {
hist(faa_combined_clean[,..col])
}
for (col in names(faa_combined_clean)[names(faa_combined_clean)!="aircraft"]) {
hist(faa_combined_clean[,..col])
}
sapply(faa_combined_clean, class)
names(faa_combined_clean)[names(faa_combined_clean)!="aircraft"]
sapply(faa_combined_clean, class)
for (col in names(faa_combined_clean)[names(faa_combined_clean)!="aircraft"]) {
cat(col)
}
for (col in 2:ncol(faa_combined_clean)) {
hist(faa_combined_clean[,..col])
}
hist(faa_combined_clean[,.(duration)])
hist(faa_combined_clean$duration)
class(faa_combined_clean[,.(duration)])
class(faa_combined_clean$duration)
unique(faa_combined_clean$aircraft)
install.packages(tidyr)
install.packages(ggplot2)
require(tidyr)
#install.packages('xlsx')
#install.packages('data.table')
install.packages(tidyr)
#install.packages('xlsx')
#install.packages('data.table')
install.packages('tidyr')
install.packages('ggplot2')
require(tidyr)
require(ggplot2)
?gather
ggplot(gather(faa_combined_clean, cols, value), aes(x = value)) +
geom_histogram() + facet_grid(.~cols)
ggplot(gather(faa_combined_clean[,2:8], cols, value), aes(x = value)) +
geom_histogram() + facet_grid(.~cols)
ggplot(gather(faa_combined_clean[,2:8], cols, value), aes(x = value)) +
geom_histogram(bins = 20) + facet_grid(.~cols)
?gather
ggplot(gather(faa_combined_clean[,2:8], cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
class(as.data.frame(faa_combined_clean[,2]))
for (col in 2:ncol(faa_combined_clean)) {
hist(data.frame(faa_combined_clean[,.col]))
}
for (col in 2:ncol(faa_combined_clean)) {
hist(as.data.frame(faa_combined_clean[,.col]))
}
for (col in 2:ncol(faa_combined_clean)) {
hist(as.data.frame(faa_combined_clean)[,.col])
}
for (col in 2:ncol(faa_combined_clean)) {
hist(data.frame(faa_combined_clean)[,.col])
}
data.frame(faa_combined_clean)[,.col]
data.frame(faa_combined_clean)
data.frame(faa_combined_clean)[,2]
for (col in 2:ncol(faa_combined_clean)) {
hist(data.frame(faa_combined_clean)[,col])
}
for (col in 2:ncol(faa_combined_clean)) {
hist(data.frame(faa_combined_clean[,aircraft == "airbus"])[,col])
}
for (col in 2:ncol(faa_combined_clean)) {
hist(data.frame(faa_combined_clean[aircraft == "airbus",])[,col])
}
for (col in 2:ncol(faa_combined_clean)) {
hist(data.frame(faa_combined_clean[aircraft == "boeing",])[,col])
}
for (col in 2:ncol(faa_combined_clean)) {
hist(data.frame(faa_combined_clean[aircraft == "airbus",])[,col])
}
for (col in 2:ncol(faa_combined_clean)) {
hist(data.frame(faa_combined_clean[aircraft == "boeing",])[,col])
}
cor(faa_combined_clean$distance, faa_combined_clean)
colnames(faa_combined_clean)
cor(faa_combined_clean$distance, faa_combined_clean[,.(duration, no_pasg, speed_ground, speed_air, height, pitch)])
as.data.frame(cor(faa_combined_clean$distance, faa_combined_clean[,.(duration, no_pasg, speed_ground, speed_air, height, pitch)]))
as.data.frame(t(cor(faa_combined_clean$distance, faa_combined_clean[,.(duration, no_pasg, speed_ground, speed_air, height, pitch)])))
cor_table <- data.frame(t(cor(faa_combined_clean$distance, faa_combined_clean[,.(duration, no_pasg, speed_ground, speed_air, height, pitch)])))
View(cor_table)
cor_table$Variable <- rownames(cor_table)
View(cor_table)
abs(-5)
abs(5)
cor_table$CorrelationSize <- abs(cor_table$t.cor.faa_combined_clean.distance..faa_combined_clean.....duration..)
View(cor_table)
cor_table$CorrelationDirection <- sign(cor_table$t.cor.faa_combined_clean.distance..faa_combined_clean.....duration..)
View(cor_table)
cor_table$CorrelationDirection <- ifelse(sign(cor_table$t.cor.faa_combined_clean.distance..faa_combined_clean.....duration.. == 1, "Positive", "Negative")
View(cor_table)
cor_table$CorrelationDirection <- ifelse(sign(cor_table$t.cor.faa_combined_clean.distance..faa_combined_clean.....duration..) == 1, "Positive", "Negative")
View(cor_table)
cor_table <- cor_table[,c("Variable", "CorrelationSize", "CorrelationDirection")]
View(cor_table)
rownames(cor_table) <- NULL
View(cor_table)
plot(faa_combined_clean)
View(cor_table)
unique(faa_combined_clean$aircraft)
class(unique(faa_combined_clean$aircraft))
as.numeric(unique(faa_combined_clean$aircraft))
faa_combined_clean[,aircraft_type := ifelse(aircraft=="airbus",0,1)]
cor_table_aircraft <- data.frame(t(cor(faa_combined_clean$distance[which(faa_combined_clean$aircraft == "airbus")], faa_combined_clean[aircraft == "airbus",.(duration, no_pasg, speed_ground, speed_air, height, pitch)])))
View(cor_table_aircraft)
cor_table_airbus <- data.frame(t(cor(faa_combined_clean$distance[which(faa_combined_clean$aircraft == "airbus")], faa_combined_clean[aircraft == "airbus",.(duration, no_pasg, speed_ground, speed_air, height, pitch)])))
cor_table_airbus$Variable <- rownames(cor_table_airbus)
cor_table_airbus$CorrelationSize <- abs(cor_table_airbus$t.cor.faa_combined_clean.distance..faa_combined_clean.....duration..)
cor_table_airbus$Variable <- rownames(cor_table_airbus)
cor_table_airbus$CorrelationSize <- abs(cor_table_airbus$t.cor.faa_combined_clean.distance.which.faa_combined_clean.aircraft....)
cor_table_airbus$CorrelationDirection <- ifelse(sign(cor_table_airbus$t.cor.faa_combined_clean.distance.which.faa_combined_clean.aircraft....) == 1, "Positive", "Negative")
cor_table_airbus$Aircraft <- "airbus"
cor_table_airbus <- cor_table_airbus[,c("Aircraft","Variable", "CorrelationSize", "CorrelationDirection")]
rownames(cor_table_airbus) <- NULL
cor_table_boeing$Variable <- rownames(cor_table_boeing)
cor_table_boeing <- data.frame(t(cor(faa_combined_clean$distance[which(faa_combined_clean$aircraft == "boeing")], faa_combined_clean[aircraft == "boeing",.(duration, no_pasg, speed_ground, speed_air, height, pitch)])))
cor_table_boeing$Variable <- rownames(cor_table_boeing)
cor_table_boeing$CorrelationSize <- abs(cor_table_boeing$t.cor.faa_combined_clean.distance.which.faa_combined_clean.aircraft....)
cor_table_boeing$CorrelationDirection <- ifelse(sign(cor_table_boeing$t.cor.faa_combined_clean.distance.which.faa_combined_clean.aircraft....) == 1, "Positive", "Negative")
cor_table_boeing$Aircraft <- "boeing"
cor_table_boeing <- cor_table_boeing[,c("Aircraft","Variable", "CorrelationSize", "CorrelationDirection")]
rownames(cor_table_boeing) <- NULL
cor_table_aircraft <- rbind(cor_table_airbus, cor_table_boeing)
View(cor_table_aircraft)
View(cor_table_boeing)
plot(faa_combined_clean[aircraft == "airbus"])
plot(faa_combined_clean[aircraft == "boeing"])
lm(faa_combined_clean$duration~faa_combined_clean$no_pasg)
simple_regression <- data.frame(Variable = NA, p_value = NA, CoefficientDirection = NA)
View(simple_regression)
simple_regression <- data.frame(Variable = character(), p_value = numeric(), CoefficientDirection = character())
lm(faa_combined_clean$duration~faa_combined_clean$no_pasg)
lm(faa_combined_clean$duration~faa_combined_clean$2)
lm(faa_combined_clean$duration~faa_combined_clean[,2])
lm(faa_combined_clean$duration~faa_combined_clean[,.(2)])
View(faa_combined_clean)
lm(faa_combined_clean$duration~faa_combined_clean[,.(no_pasg)])
col <- "LOL"
col
eval(col)
lm(duration~no_pasg, data = faa_combined_clean)
col <- "no_pasg"
lm(duration~eval(col), data = faa_combined_clean)
names(faa_combined_clean)
names(faa_combined_clean)[3]
col <-
lm(duration~names(faa_combined_clean)[3], data = faa_combined_clean)
eval(parse(text = col))
col <-
lm(duration~eval(parse(text = col)), data = faa_combined_clean)
names(faa_combined_clean)
names(faa_combined_clean)[3:8]
for(col in names(faa_combined_clean)[3:8]
?
}
for(col in names(faa_combined_clean)[3:8])
{
lm(duration~eval(parse(text = col)), data = faa_combined_clean)
}
for(col in names(faa_combined_clean)[3:8]){
summary(lm(duration~eval(parse(text = col)), data = faa_combined_clean))
}
for(col in names(faa_combined_clean)[2:7]){
a <- (lm(duration~eval(parse(text = col)), data = faa_combined_clean))
}
a
for(col in names(faa_combined_clean)[2:7]){
a <- (lm(distance~eval(parse(text = col)), data = faa_combined_clean))
}
a
names(faa_combined_clean)
lm(distance ~ pitch, data = faa_combined_clean)
summary_model <- lm(distance ~ pitch, data = faa_combined_clean)
summary_model <- summary(lm(distance ~ pitch, data = faa_combined_clean))
summary_model
summary_model$coefficients
summary_model$coefficients[,1]
summary_model$coefficients[2,1]
summary_model$coefficients[2,4]
parse(col)
parse(text = col)
eval(parse(text = col))
col
View(cor_table)
data.frame(Variable = col, p_value = summary_model$coefficients[2,4], CoefficientDirection = ifelse(sign(summary_model$coefficients[2,1]) == 1, "Positive", "Negative"))
simple_regression <- rbind(simple_regression, data.frame(Variable = col, p_value = summary_model$coefficients[2,4], CoefficientDirection = ifelse(sign(summary_model$coefficients[2,1]) == 1, "Positive", "Negative")))
View(simple_regression)
simple_regression <- data.frame(Variable = character(), p_value = numeric(), CoefficientDirection = character())
for(col in names(faa_combined_clean)[2:7]){
summary_model <- (lm(distance~eval(parse(text = col)), data = faa_combined_clean))
simple_regression <- rbind(simple_regression, data.frame(Variable = col, p_value = summary_model$coefficients[2,4], CoefficientDirection = ifelse(sign(summary_model$coefficients[2,1]) == 1, "Positive", "Negative")))
}
names(faa_combined_clean[2:7])
for(col in names(faa_combined_clean)[2:7]){
cat(col)
summary_model <- (lm(distance~eval(parse(text = col)), data = faa_combined_clean))
simple_regression <- rbind(simple_regression, data.frame(Variable = col, p_value = summary_model$coefficients[2,4], CoefficientDirection = ifelse(sign(summary_model$coefficients[2,1]) == 1, "Positive", "Negative")))
}
for(col in names(faa_combined_clean)[2:7]){
cat(col)
summary_model <- (lm(distance~eval(parse(text = col)), data = faa_combined_clean))
summary_model
simple_regression <- rbind(simple_regression, data.frame(Variable = col, p_value = summary_model$coefficients[2,4], CoefficientDirection = ifelse(sign(summary_model$coefficients[2,1]) == 1, "Positive", "Negative")))
}
summary_model
for(col in names(faa_combined_clean)[2:7]){
summary_model <- summary(lm(distance~eval(parse(text = col)), data = faa_combined_clean))
simple_regression <- rbind(simple_regression, data.frame(Variable = col, p_value = summary_model$coefficients[2,4], CoefficientDirection = ifelse(sign(summary_model$coefficients[2,1]) == 1, "Positive", "Negative")))
}
View(simple_regression)
simple_regression <- data.frame(Variable = character(), p_value = numeric(), Coefficient = numeric(), CoefficientDirection = character())
for(col in names(faa_combined_clean)[2:7]){
summary_model <- summary(lm(distance~eval(parse(text = col)), data = faa_combined_clean))
simple_regression <- rbind(simple_regression, data.frame(Variable = col, p_value = summary_model$coefficients[2,4], Coefficient = summary_model$coefficients[2,1], CoefficientDirection = ifelse(sign(summary_model$coefficients[2,1]) == 1, "Positive", "Negative")))
}
View(simple_regression)
col
paste(col, "Lol")
faa_combined_clean$duration_std <- (faa_combined_clean$duration - mean(faa_combined_clean$duration))/sd(faa_combined_clean)
faa_combined_clean$duration_std <- (faa_combined_clean$duration - mean(faa_combined_clean$duration))/sd(faa_combined_clean$duration)
names(faa_combined_clean)
faa_combined_clean$duration_std <- (faa_combined_clean$duration - mean(faa_combined_clean$duration))/sd(faa_combined_clean$duration)
faa_combined_clean$no_pasg_std <- (faa_combined_clean$no_pasg - mean(faa_combined_clean$no_pasg))/sd(faa_combined_clean$no_pasg)
faa_combined_clean$speed_ground_std <- (faa_combined_clean$speed_ground - mean(faa_combined_clean$speed_ground))/sd(faa_combined_clean$speed_ground)
faa_combined_clean$speed_air_std <- (faa_combined_clean$speed_air - mean(faa_combined_clean$speed_air))/sd(faa_combined_clean$speed_air)
faa_combined_clean$height_std <- (faa_combined_clean$height - mean(faa_combined_clean$height))/sd(faa_combined_clean$height)
faa_combined_clean$pitch_std <- (faa_combined_clean$pitch - mean(faa_combined_clean$pitch))/sd(faa_combined_clean$pitch)
names(faa_combined_clean)
simple_regression_std <- data.frame(Variable = character(), p_value = numeric(), Coefficient = numeric(), CoefficientDirection = character())
for(col in names(faa_combined_clean)[10:15]){
summary_model <- summary(lm(distance~eval(parse(text = col)), data = faa_combined_clean))
simple_regression_std <- rbind(simple_regression_std, data.frame(Variable = col, p_value = summary_model$coefficients[2,4], Coefficient = summary_model$coefficients[2,1], CoefficientDirection = ifelse(sign(summary_model$coefficients[2,1]) == 1, "Positive", "Negative")))
}
View(simple_regression_std)
library("faraway")
data("orings")
str(orings)
summary(orings)
table(orings$damage)
View(orings)
?orings
plot(damage/6 ~ temp, orings, xlim = c(25,85), ylim = c(0,1), ylan = "Prob od damage")
plot(damage/6 ~ temp, orings, xlim = c(25,85), ylim = c(0,1), ylan = "Prob of damage")
plot(damage/6 ~ temp, orings, xlim = c(25,85), ylim = c(0,1), ylab = "Prob of damage")
warnings()
plot(damage/6 ~ temp, orings, xlim = c(25,85), ylim = c(0,1), ylab = "Prob of damage")
damage2 <- sapply(orings$damage, function(x) rep(c(0,1), times = c(6-x,x)))
orings2 <- with(orings, data.frame(temp+rep(temp, each=6), damage=as.vector(damage2)))
head(orings2)
str(orings2)
View(orings2)
View(orings)
orings2 <- with(orings, data.frame(temp=rep(temp, each=6), damage=as.vector(damage2)))
head(orings2)
str(orings2)
model.2 <- glm(damage ~ temp, family = binomial, data = orings)
model.2 <- glm(damage ~ temp, family = binomial, data = orings2)
summary(model.2)
predict(model.2, newdata = data.frame(temp=31), type = "response", se.fit = T)
c(0.993-1.96*0.01153302, 0.993+1.996*0.1153392)
c(0.993-1.96*0.012, 0.993+1.996*0.012)
predict(model.2, newdata = data.frame(temp=31), type = "link", se.fit = T)
ilogit(c(4.96 - 1.96*1.667, 4.960+1.96*1.667))
exp(-30*-0.21623)
exp(-30*-0.216)
model.1 <- flm(cbind(damage,6-damage)~temp, family = binomial, data = orings)
model.1 <- glm(cbind(damage,6-damage)~temp, family = binomial, data = orings)
View(model.1)
summary(model.1)
x< -seq (25,85,1)
lines( x,ilogit (11.663 -0.216*x))
abline(v =31, lty = 2)
x <- seq(25,85,1)
lines(x,ilogit (11.663 -0.216*x))
abline(v =31, lty = 2)
getwd()
load("yellow_january_cleaned_timeSeparated.RData")
timeBreaks <- times(c("00:00:00","01:00:00", "02:00:00", "03:00:00", "04:00:00", "05:00:00", "06:00:00", "07:00:00", "08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00", "17:00:00", "18:00:00", "19:00:00", "20:00:00", "21:00:00", "22:00:00", "23:00:00"))
library(data.table)
library(Hmisc)
library(ggplot2)
library(dplyr)
library(maps)
library(dbscan)
#install.packages("chron")
library(chron)
#install.packages("lubridate")
library(lubridate)
timeBreaks <- times(c("00:00:00","01:00:00", "02:00:00", "03:00:00", "04:00:00", "05:00:00", "06:00:00", "07:00:00", "08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00", "17:00:00", "18:00:00", "19:00:00", "20:00:00", "21:00:00", "22:00:00", "23:00:00"))
labelBreaks <- c(1,2,3,4,5,6,7,8,9,10,1,12,13,14,15,16,17,18,19,20,21,22,23,24)
yellow_january_pd_clean$pickup_time_bundle <- cut(yellow_january_pd_clean$tpep_pickup_time2, breaks = timeBreaks, labels = labelBreaks)
timeBreaks <- times(c("00:00:00","01:00:00", "02:00:00", "03:00:00", "04:00:00", "05:00:00", "06:00:00", "07:00:00", "08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00", "17:00:00", "18:00:00", "19:00:00", "20:00:00", "21:00:00", "22:00:00", "23:00:00"))
labelBreaks <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)
yellow_january_pd_clean$pickup_time_bundle <- cut(yellow_january_pd_clean$tpep_pickup_time2, breaks = timeBreaks, labels = labelBreaks)
View(yellow_january_pd_clean[which(is.na(yellow_january_pd_clean$pickup_time_bundle)),])
unique(hour(times("23:00:00")))
unique(as.POSIXct(times("23:00:00")))
a <- unique(yellow_january_pd_clean$tpep_pickup_time2[which(is.na(yellow_january_pd_clean$pickup_time_bundle)),])
a <- unique(yellow_january_pd_clean$tpep_pickup_time2[which(is.na(yellow_january_pd_clean$pickup_time_bundle))])
View(a)
unique(yellow_january_pd_clean$tpep_dropoff_time2)
unique(yellow_january_pd_clean$dropoff_time_bundle)
yellow_january_pd_clean$pickup_time_bundle[which(is.na(yellow_january_pd_clean$pickup_time_bundle))] <- 24
yellow_january_pd_clean$dropoff_time_bundle[which(is.na(yellow_january_pd_clean$dropoff_time_bundle))] <- 24
yellow_january_pd_clean$pickup_time_bundle[which(is.na(yellow_january_pd_clean$pickup_time_bundle))] <- as.factor(24)
install.packages('rpart')
install.packages('rpart.plot')
library(rpart)
library(rpart.plot)
data <- Boston
rm(list = ls())
library(MASS)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(corrplot)
rm(list = ls())
library(MASS)
library(ggplot2)
library(dplyr)
library(gridExtra)
#library(corrplot)
library(corrgram)
rm(list = ls())
library(MASS)
library(ggplot2)
library(dplyr)
library(gridExtra)
#library(corrplot)
#library(corrgram)
require(tree)
data <- Boston
set.seed(12345678)
index <- sample(seq_len(nrow(data)), size = floor(0.70*nrow(data)))
train_data_boston <- data[index,]
test_data_boston <- data[-index,]
library(rpart)
library(rpart.plot)
boston_rpart <- rpart(formula = medv ~ ., data = train_data_boston)
options(digits=7)
boston_rpart
prp(boston_rpart,digits = 4, extra = 1)
train_tree_boston <- tree(medv~., data = train_data_boston)
plot(train_tree_boston)
text(train_tree_boston, pretty=0)
library(knitr)
kable(test_data_boston[10,], digits=2, row.names = F)
train_boston_pred <- predict(boston_rpart)
test_boston_pred <- predict(boston_rpart, test_data_boston)
MSE_tree <- mean((train_boston_pred - train_data_boston$medv)^2)
MSPE_tree <- mean((test_boston_pred - test_data_boston$medv)^2)
MSE_tree
MSE_tree
MSPE_tree
test_boston_pred
rm(list=ls())
dimnames(USArrests)
apply(USArrests,2,mean)
apply(USArrests,2, var)
pca.out=prcomp(USArrests, scale=TRUE)
pca.out
names(pca.out)
biplot(pca.out, scale=0)
#prcomp will standardize the variables for us
pca.out=prcomp(USArrests, scale=TRUE)
pca.out
names(pca.out)
biplot(pca.out, scale = 0)
biplot(pca.out, scale = 0, cex = 0.7)
biplot(pca.out, scale = 0, cex = 0.6)
x <- matrix(rnorm(100*2), 100, 2)
#Generating means and shiting means for the 4 clusters
xmean <- matrix(rnorm(8, sd = 4), 4, 2)
which <- sample(1:4, 100, replace = TRUE)
#xmean[which,] produces a 100 row matrix with 2 columns
x <- x + xmean[which,]
plot(x, col = which, pch = 19)
set.seed(101)
#Generating 2 columns, 100 records
x <- matrix(rnorm(100*2), 100, 2)
#Generating means and shiting means for the 4 clusters
xmean <- matrix(rnorm(8, sd = 4), 4, 2)
#Which point is going to be placed on which cluster?
which <- sample(1:4, 100, replace = TRUE)
#xmean[which,] produces a 100 row matrix with 2 columns
x <- x + xmean[which,]
plot(x, col = which, pch = 19)
#We run 15 random starts (15 times algorithm, each time the starting cluster assignment is different)
kmout <- kmeans(x, 4, nstart = 15)
kmout
plot(x, col = kmout$cluster, cex = 2, pch = 1, lwd = 2)
#Clusters
plot(x, col = kmout$cluster, cex = 2, pch = 1, lwd = 2)
#Plotting the original data
points(x, col = which, pch = 19)
hc_complete <- hclust(dist(x), method = "complete")
plot(hc_complete)
hc_complete <- hclust(dist(x), method = "complete")
hc_single <- hclust(dist(x), method = "single")
hc_average <- hclust(dist(x), method = "average")
par(mfrow = c(1,3))
plot(hc_complete)
plot(hc_single)
plot(hc_average)
hc_cut <- cutree(hc_complete, 6)
table(hc.cut, which)
table(hc_cut, which)
hc_cut <- cutree(hc_complete, 4)
table(hc_cut, which)
table(hc_cut, kmout$cluster)
plot(hc_complete,labels=which)
plot(hc_complete,labels=which)
rm(list = ls())
load("10.R.Rdata")
setd("E:/Academia/Additional/Statistical Learning - Lagunita Stanford/R Codes")
setwd("E:/Academia/Additional/Statistical Learning - Lagunita Stanford/R Codes")
load("10.R.Rdata")
x_whole <- rbind(x, x.test)
x_whole <- rbind(x, x.test)
#prcomp will standardize the variables for us
pca_out=prcomp(x_whole, scale=TRUE)
pca_out
names(pca_out)
sum(pca_out$sdev^2)
pca_out$sdev
sum(pca_out$sdev[1:5])
pca_out$sdev[1:5]
sum(pca_out$sdev[1:5]^2)
pca_out$sdev[1:5]
pca_out$sdev^2
pca_out$sdev[1:5]
pca_out$sdev[1:5]^2
sum(pca_out$sdev[1:5]^2)
pca_out$sdev[1:5]
pca_out$sdev[1:5]^2
sum(pca_out$sdev[1:5]^2)
sum(pca_out$sdev[1:5]^2)/200
pca_out$x
data.frame(pca_out$x[1:5])
data.frame(pca_out$x[,1:5])
pc1 <- pca_out$x[,1]
lm(y ~ pc1[1:300,] + pc2[1:300,] + pc3[1:300,] + pc4[1:300] + pc5[1:300])
data.frame(pca_out$x[,1:5])
pc1 <- pca_out$x[,1]
pc2 <- pca_out$x[,2]
pc3 <- pca_out$x[,3]
pc4 <- pca_out$x[,4]
pc5 <- pca_out$x[,5]
lm(y ~ pc1[1:300] + pc2[1:300] + pc3[1:300] + pc4[1:300] + pc5[1:300])
pc1 <- pca_out$x[,1]
pc2 <- pca_out$x[,2]
pc3 <- pca_out$x[,3]
pc4 <- pca_out$x[,4]
pc5 <- pca_out$x[,5]
lm(y ~ pc1[1:300] + pc2[1:300] + pc3[1:300] + pc4[1:300] + pc5[1:300])
pca_df <- data.frame(pca_out$x[,1:5])
View(pca_df)
names(pca_df)
ynew <- rbind(y,y.test)
View(ynew)
View(as.data.frame(y))
View(as.data.frame(y = y.test))
View(as.data.frame(ynew = y.test))
View(as.data.frame(y.test))
train_model <- lm(y ~ pc1[1:300] + pc2[1:300] + pc3[1:300] + pc4[1:300] + pc5[1:300])
data.frame(pc1 = pc1[301:1300])
predict(train_model, newdata = data.frame(pc1 = pc1[301:1300], pc2 = pc2[301:1300], pc3[301:1300], pc4[301:1300], pc5[301:1300])
predict(train_model, newdata = data.frame(pc1 = pc1[301:1300], pc2 = pc2[301:1300], pc3[301:1300], pc4[301:1300], pc5[301:1300]))
predict(train_model, newdata = as.data.frame(pc1 = pc1[301:1300], pc2 = pc2[301:1300], pc3[301:1300], pc4[301:1300], pc5[301:1300]))
pca_df <- cbind(pca_df, as.data.frame(y[1:300]))
as.data.frame(y[1:300])
data.frame(y = y[1:300])
pca_df <- cbind(pca_df, data.frame(y = y[1:300]))
pca_df <- cbind(pca_df, rbind(data.frame(y), data.frame(y = y.test)))
View(pca_df)
names(pca_df)
train_model2 <- lm(y ~ PC1 + PC2 + PC3 + PC4 + PC5, data = pca_df[1:300,])
train_model
train_model2
train_model <- lm(y ~ PC1 + PC2 + PC3 + PC4 + PC5, data = pca_df[1:300,])
predict(train_model, newdata = pca_df[301:1300,])
mean((predict(train_model, newdata = pca_df[301:1300,]) - y.test)^2)
train_old <- lm(y ~ x)
data <- cbind(x,y)
View(data)
View(data[, c("y", "X1")])
train_old <- lm(y ~., data = data)
test_data <- cbind(x.test, y = y.test)
mean((predict(train_old, newdata = test_data) - test_data$y)^2)
(predict(train_old, newdata = test_data) - test_data$y)
names(test_data)
mean((predict(train_old, newdata = test_data) - test_data$y)^2)
